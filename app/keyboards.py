from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from database.sqlite_db import Product, Order, OrderItem, User


async def main_menu():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
    )
    return keyboard.adjust(1, 1, 2).as_markup()


async def catalog():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üçï –ü–∏—Ü—Ü—ã", callback_data="pizza"),
        InlineKeyboardButton(text="üçü –ó–∞–∫—É—Å–∫–∏", callback_data="snack"),
        InlineKeyboardButton(text="ü•§ –ù–∞–ø–∏—Ç–∫–∏", callback_data="drink"),
        InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main menu"),
    )
    return keyboard.adjust(1, 2, 1).as_markup()


async def init_category_menu(products: list[Product]):
    keyboard = InlineKeyboardBuilder()
    for product in products:
        name_btn = InlineKeyboardButton(
            text=f"{product.emoji} {product.name}",
            callback_data=f"info_{product.id}",
        )
        small_size_btn = InlineKeyboardButton(
            text=f"{product.small_size_text} {product.price_small} BYN",
            callback_data=f"add_{product.id}_small",
        )
        large_size_btn = InlineKeyboardButton(
            text=f"{product.large_size_text} {product.price_large} BYN",
            callback_data=f"add_{product.id}_large",
        )

        if not product.has_only_one_size():
            keyboard.row(name_btn, small_size_btn, large_size_btn)
        else:
            keyboard.row(name_btn, small_size_btn)

    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog"),
        InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main menu"),
    )
    return keyboard.as_markup()


async def init_cart(list_cart_items: list, cart_amount: float):
    keyboard = InlineKeyboardBuilder()

    if list_cart_items and cart_amount:
        for product, size, quantity in list_cart_items:
            product: Product
            size: str
            quantity: str
            price_by_count = product.get_size_price(size) * int(quantity)
            keyboard.row(
                InlineKeyboardButton(
                    text=f"{product.emoji} {product.name} {product.get_size_text(size)} - {quantity} —à—Ç -- {price_by_count:.2f} BYN",
                    callback_data="1",
                )
            )
            keyboard.row(
                InlineKeyboardButton(
                    text=f"+1",
                    callback_data=f"plus_{product.id}_{size}",
                ),
                InlineKeyboardButton(
                    text=f"-1",
                    callback_data=(
                        f"minus_{product.id}_{size}"
                        if int(quantity) > 1 or len(list_cart_items) > 1
                        else "erase_cart"
                    ),
                ),
                InlineKeyboardButton(
                    text=f"‚ùå",
                    callback_data=(
                        f"del_{product.id}_{size}"
                        if len(list_cart_items) > 1
                        else "erase_cart"
                    ),
                ),
            )
        keyboard.row(
            InlineKeyboardButton(
                text=f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ({float(cart_amount):.2f} BYN)",
                callback_data="make_order",
            )
        )
        keyboard.row(
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="erase_cart")
        )
        keyboard.row(
            InlineKeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", callback_data="main menu"),
        )
    else:
        keyboard.add(
            InlineKeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", callback_data="main menu"),
        )
        keyboard.adjust(1)
    return keyboard.as_markup()


#### –ê–î–ú–ò–ù–ö–ê ####


async def admin():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="‚úô –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="product_create"),
        InlineKeyboardButton(text="üñçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="product_edit"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="product_delete"),
        InlineKeyboardButton(
            text="üõë –ü—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõë", callback_data="admin_list"
        ),
        InlineKeyboardButton(text="üë§ –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="main menu"),
    )
    return keyboard.adjust(1).as_markup()


async def create_product():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üçï –ü–∏—Ü—Ü–∞", callback_data="product_create_pizza"),
        InlineKeyboardButton(text="üçü –ó–∞–∫—É—Å–∫–∞", callback_data="product_create_snack"),
        InlineKeyboardButton(text="ü•§ –ù–∞–ø–∏—Ç–æ–∫", callback_data="product_create_drink"),
        InlineKeyboardButton(text="üç∞ –¢–æ—Ä—Ç–∏–∫", callback_data="product_create_cake"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"),
    )
    return keyboard.adjust(1).as_markup()


async def cancel_creation():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üõë –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è", callback_data="admin"),
    )
    return keyboard.adjust().as_markup()


async def admin_list(admins: list[User], callback_user: User):
    keyboard = InlineKeyboardBuilder()
    for admin in admins:
        text = f'{admin.id} - {admin.username} - {admin.first_name}{" (–í—ã)" if admin.id == callback_user.id else ""}'
        keyboard.add(InlineKeyboardButton(text=text, callback_data=f"admin_id_{admin.id}"))
    keyboard.add(
        InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_create"
        ),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin"),
    )
    return keyboard.adjust(1).as_markup()


async def product_delete(products: list[Product]):
    keyboard = InlineKeyboardBuilder()
    for product in products:
        keyboard.add(
            InlineKeyboardButton(
                text=f"{product.emoji} {product.name}",
                callback_data=f"product_delete_{product.id}",
            )
        )
    keyboard.adjust(2)
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
    return keyboard.as_markup()


async def product_confirmed_delete(id):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="‚ùå –£–î–ê–õ–ò–¢–¨ ‚ùå",
            callback_data=f"product_confirmed_delete_{id}",
        ),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="product_delete"),
    )

    return keyboard.as_markup()


async def product_edit(products: list[Product]):
    keyboard = InlineKeyboardBuilder()
    for product in products:
        keyboard.add(
            InlineKeyboardButton(
                text=f"{product.emoji} {product.name}",
                callback_data=f"product_edit_{product.id}",
            )
        )
    keyboard.adjust(2)
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
    return keyboard.as_markup()


async def product_edit_choose(product: Product):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text=f"–ù–ê–ó–í–ê–ù–ò–ï ({product.name})",
            callback_data=f"product_value_edit_name_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–¶–ï–ù–ê –ó–ê –°–¢–ê–ù–î–ê–†–¢ ({product.price_small} BYN)",
            callback_data=f"product_value_edit_price_small_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–¶–ï–ù–ê –ó–ê –ë–û–õ–¨–®–û–ô(–£–Æ) ({f'{product.price_large} BYN' if product.price_large else "---"})",
            callback_data=f"product_value_edit_price_large_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–ö–ê–¢–ï–ì–û–†–ò–Ø ({product.emoji} {product.category_rus})",
            callback_data=f"product_value_edit_category_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–û–ü–ò–°–ê–ù–ò–ï ({product.description or "---"})",
            callback_data=f"product_value_edit_description_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–ò–ù–ì–†–ï–î–ò–ï–ù–¢–´ ({product.ingredients or "---"})",
            callback_data=f"product_value_edit_ingredients_{product.id}",
        ),
        InlineKeyboardButton(
            text=f"–ö–ë–ñ–£ ({product.nutrition or "---"})",
            callback_data=f"product_value_edit_nutrition_{product.id}",
        ),
    )

    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="product_edit"),
        InlineKeyboardButton(text="‚è™ –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å", callback_data="admin"),
    )

    return keyboard.as_markup()


async def back_to_admin_list():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_list"))
    return keyboard.adjust().as_markup()


#### –û–ü–õ–ê–¢–ê ####


async def cancel_payment():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üõë –û—Ç–º–µ–Ω–∞", callback_data="cart"),
    )
    return keyboard.adjust().as_markup()


async def pay_to_main():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"),
        InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main menu"),
    )
    return keyboard.adjust(1).as_markup()


#### –ó–ê–ö–ê–ó–´ ####


async def orders(orders: list[Order]):
    keyboard = InlineKeyboardBuilder()
    for order in orders:
        keyboard.add(
            InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order.id} –æ—Ç {order.created_at}",
                callback_data=f"order_{order.id}",
            )
        )
    keyboard.adjust(1)
    if not orders:
        keyboard.row(
            InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        )
        keyboard.row(
            InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main menu"),
        )
    else:
        keyboard.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main menu"),
        )
    return keyboard.as_markup()


async def order_info():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="orders"),
    )
    keyboard.row(
        InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main menu"),
    )
    return keyboard.as_markup()
